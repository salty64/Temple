[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0.443137, 0.74902, 0.333333, 1 )

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
texture = SubResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 0.25 ]

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorLen" id=12]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
uniform sampler2D tex_frg_16 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:22
	vec3 n_out22p0 = vec3(UV, 0.0);

// Texture:16
	vec4 tex_frg_16_read = texture(tex_frg_16, n_out22p0.xy);
	vec3 n_out16p0 = tex_frg_16_read.rgb;
	float n_out16p1 = tex_frg_16_read.a;

// Input:19
	float n_out19p0 = TIME;

// ScalarFunc:20
	float n_out20p0 = sin(n_out19p0);

// ScalarOp:25
	float n_in25p1 = 2.00000;
	float n_out25p0 = n_out20p0 / n_in25p1;

// ScalarOp:24
	float n_in24p1 = 0.50000;
	float n_out24p0 = n_out25p0 + n_in24p1;

// VectorOp:6
	vec3 n_out6p0 = n_out16p0 * vec3(n_out24p0);

// VectorLen:8
	float n_out8p0 = length(n_out6p0);

// ScalarOp:26
	float n_in26p1 = 0.25000;
	float n_out26p0 = n_out8p0 + n_in26p1;

// Color:13
	vec3 n_out13p0 = vec3(0.443137, 0.749020, 0.333333);
	float n_out13p1 = 1.000000;

// Output:0
	ALBEDO = n_out6p0;
	ALPHA = n_out26p0;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -904.886, -189.139 )
nodes/fragment/0/position = Vector2( 580, 60 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -400, -100 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( -20, 100 )
nodes/fragment/13/node = SubResource( 1 )
nodes/fragment/13/position = Vector2( 80, 320 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( -820, -120 )
nodes/fragment/19/node = SubResource( 5 )
nodes/fragment/19/position = Vector2( -1140, 140 )
nodes/fragment/20/node = SubResource( 6 )
nodes/fragment/20/position = Vector2( -980, 260 )
nodes/fragment/22/node = SubResource( 7 )
nodes/fragment/22/position = Vector2( -1120, -80 )
nodes/fragment/24/node = SubResource( 8 )
nodes/fragment/24/position = Vector2( -720, 520 )
nodes/fragment/25/node = SubResource( 9 )
nodes/fragment/25/position = Vector2( -840, 360 )
nodes/fragment/26/node = SubResource( 10 )
nodes/fragment/26/position = Vector2( 280, 80 )
nodes/fragment/connections = PoolIntArray( 6, 0, 8, 0, 16, 0, 6, 0, 19, 0, 20, 0, 22, 0, 16, 0, 24, 0, 6, 1, 20, 0, 25, 0, 25, 0, 24, 0, 6, 0, 0, 0, 13, 0, 0, 5, 8, 0, 26, 0, 26, 0, 0, 1 )

[resource]
shader = SubResource( 13 )
